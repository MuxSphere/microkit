version: '3.8'

networks:
  microservices_net:
    driver: bridge

services:
  consul:
    image: consul:latest
    ports:
      - "8500:8500"          # Consul UI
      - "8600:8600/udp"      # Consul DNS
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8500/v1/status/leader || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices_net

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - SERVICE_A_URL=http://service-a:8080
      - SERVICE_B_URL=http://service-b:8080
      - RATE_LIMIT=100
      - JWT_SECRET=your-secret-key
      - CONSUL_HTTP_ADDR=consul:8500
    depends_on:
      consul:
        condition: service_healthy
    networks:
      - microservices_net

  service-a:
    build:
      context: .
      dockerfile: service-a/Dockerfile
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - PORT=8080
      - GRPC_PORT=50051
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CONSUL_HTTP_ADDR=consul:8500
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - microservices_net

  service-b:
    build:
      context: .
      dockerfile: service-b/Dockerfile
    ports:
      - "8081:8080"
      - "50052:50051"
    environment:
      - PORT=8080
      - GRPC_PORT=50051
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CONSUL_HTTP_ADDR=consul:8500
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - microservices_net

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=microservices
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices_net

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices_net

volumes:
  postgres_data:
